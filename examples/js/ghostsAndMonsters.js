// Generated by CoffeeScript 1.3.3
(function() {

  window.GhostsAndMonstersGame = (function() {
    var PIXELS_PER_METER, forceMultiplier, frameRate, gravityX, gravityY;

    PIXELS_PER_METER = 20;

    gravityX = 0;

    gravityY = 10;

    frameRate = 60;

    forceMultiplier = 5;

    $(document).ready(function() {
      var canvas, debugCanvas, ph, pw, statsCanvas;
      canvas = document.getElementById('easelCanvas');
      debugCanvas = document.getElementById('debugCanvas');
      statsCanvas = document.getElementById('stats');
      pw = canvas.parentNode.clientWidth;
      ph = canvas.parentNode.clientHeight;
      canvas.height = pw * 0.9 * (canvas.height / canvas.width);
      canvas.width = pw * 0.9;
      canvas.style.top = (ph - canvas.height) / 2 + "px";
      canvas.style.left = (pw - canvas.width) / 2 + "px";
      debugCanvas.height = pw * 0.9 * (debugCanvas.height / debugCanvas.width);
      debugCanvas.width = pw * 0.9;
      debugCanvas.style.top = (ph - debugCanvas.height) / 2 + "px";
      debugCanvas.style.left = (pw - debugCanvas.width) / 2 + "px";
      return new GhostsAndMonstersGame(canvas, debugCanvas, statsCanvas);
    });

    GhostsAndMonstersGame.prototype.reset = function() {
      return alert(window.height);
    };

    function GhostsAndMonstersGame(canvas, debugCanvas, statsCanvas) {
      var g;
      g = new Graphics();
      this.world = new EaselBoxWorld(this, frameRate, canvas, debugCanvas, gravityX, gravityY, PIXELS_PER_METER);
      this.world.addLandscape({
        width: canvas.width,
        height: canvas.height,
        iterations: 8,
        smoothness: 0.05,
        vertical_offset: canvas.height * 0.75,
        type: 'static'
      });
      this.monkey1 = this.world.addMonkey({
        SpriteSheet: new SpriteSheet({
          images: ["/img/BREATH/left_breath1-resized.png", "/img/BREATH/left_breath2-resized.png", "/img/BREATH/left_breath3-resized.png", "/img/BREATH/left_breath4-resized.png"],
          frames: {
            width: 308,
            height: 308
          },
          animations: {
            standby: [0, 3, "standby", 5]
          }
        }),
        scaleX: 0.4,
        scaleY: 0.4,
        size_head: 15,
        size_torso: 20,
        size_lowerbody: 22,
        density: 2,
        friction: 0.8,
        restitution: 0.3,
        xPixels: 25,
        yPixels: 300,
        regX: 60,
        regY: 190
      });
      this.monkey2 = this.world.addMonkey({
        SpriteSheet: new SpriteSheet({
          images: ["/img/BREATH/right_breath1-resized.png", "/img/BREATH/right_breath2-resized.png", "/img/BREATH/right_breath3-resized.png", "/img/BREATH/right_breath4-resized.png"],
          frames: {
            width: 308,
            height: 308
          },
          animations: {
            standby: [0, 3, "standby", 5]
          }
        }),
        scaleX: 0.4,
        scaleY: 0.4,
        size_head: 15,
        size_torso: 20,
        size_lowerbody: 22,
        density: 2,
        friction: 0.8,
        restitution: 0.3,
        xPixels: 745,
        yPixels: 300,
        regX: 230,
        regY: 190
      });
      this.arrow = this.world.addArrow({
        xPixels: 100,
        yPixels: 100,
        /*
              The arrow is sketched below. Lettered points are the ones actually drawn in alphabetical order(i.e. A-F)
              The X-es are shown for illustration only. 
              Coordinates are A = (x1,y1), B = (x2,y2) and so on. The last point is F = (x6,y6) 
                                                         E
                                                         D    X
                                               X                 X
                                     X                              X
                           X                                           X    
               A                                                          F    
                           X                                           X    
                                     X                              X           
                                               X                 X  
                                                         B   X
                                                         C
        */

        shape_coordinates: [100, 100, 170, 110, 170, 115, 170, 90, 170, 85, 190, 100],
        rotation: 45
      });
      this.stats = new Stats();
      statsCanvas.appendChild(this.stats.domElement);
    }

    GhostsAndMonstersGame.prototype.tick = function() {
      return this.stats.update();
    };

    return GhostsAndMonstersGame;

  })();

}).call(this);
